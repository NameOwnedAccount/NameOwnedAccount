{
  "address": "0xAbAaC3B10E8730E1Ce186338A75cE701eb1700E8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authenticator",
          "type": "address"
        }
      ],
      "name": "AuthKeyUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "authKey",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "authKey",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "authenticate",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "authKey_",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newAuthKey",
          "type": "address"
        }
      ],
      "name": "updateAuthKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "username",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa46c8a9ff2a2e01aec585d065179d69048a9252b91074e5ee67fc5dca774f0c7",
  "receipt": {
    "to": null,
    "from": "0xa4b368e3a9D49Ff15b58f70Fb976724A98B6D149",
    "contractAddress": "0xAbAaC3B10E8730E1Ce186338A75cE701eb1700E8",
    "transactionIndex": 1,
    "gasUsed": "425172",
    "logsBloom": "0x
    "blockHash": "0xdc1f544472be084dcf006f427f0042b1c20aff8cdec4859cbc643407c4141e2d",
    "transactionHash": "0xa46c8a9ff2a2e01aec585d065179d69048a9252b91074e5ee67fc5dca774f0c7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25627437,
        "transactionHash": "0xa46c8a9ff2a2e01aec585d065179d69048a9252b91074e5ee67fc5dca774f0c7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a4b368e3a9d49ff15b58f70fb976724a98b6d149",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001e35d568573c8c0000000000000000000000000000000000000000000000000d645b88a3ab44f0000000000000000000000000000000000000000000000bf2524ca250f3bfc0700000000000000000000000000000000000000000000000000d4625b33b540864000000000000000000000000000000000000000000000bf2526ad8265c16fcfc",
        "logIndex": 2,
        "blockHash": "0xdc1f544472be084dcf006f427f0042b1c20aff8cdec4859cbc643407c4141e2d"
      }
    ],
    "blockNumber": 25627437,
    "cumulativeGasUsed": "1672866",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ba1a2fff3b46e926ec4c6059bde08236",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authenticator\",\"type\":\"address\"}],\"name\":\"AuthKeyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authKey\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"authKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authenticate\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"authKey_\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAuthKey\",\"type\":\"address\"}],\"name\":\"updateAuthKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"username\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IdentityService.sol\":\"IdentityService\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IIdentityService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport './LibIdentity.sol';\\n\\ninterface IIdentityService {\\n    event Register(\\n        bytes32 indexed id,\\n        address indexed authKey,\\n        string username\\n    );\\n\\n    event AuthKeyUpdate(\\n        bytes32 indexed id,\\n        address indexed authenticator\\n    );\\n\\n    function authenticate(bytes32 id, address operator) external view;\\n\\n    function username(bytes32 id) external view returns(string memory);\\n\\n    function authKey(bytes32 id) external view returns(address);\\n}\\n\",\"keccak256\":\"0xf7ed5ebb0c9477fa09bb15832d3a4d9d23f8a8f92153c9dcf8d153c2a62e90e6\",\"license\":\"MIT\"},\"contracts/IdentityService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport './IIdentityService.sol';\\n\\ncontract IdentityService is Context, IIdentityService {\\n    using LibIdentity for address;\\n\\n    struct Identity {\\n        string username;\\n        address authKey;\\n    }\\n\\n    mapping(bytes32 => Identity) private _identities;\\n\\n    function register(\\n        string memory username_,\\n        address authKey_\\n    ) external {\\n        bytes32 id = keccak256(abi.encode(username_));\\n        require(\\n            authKey(id) == address(0),\\n            'IdentityService: already registered'\\n        );\\n        _identities[id] = Identity(username_, authKey_);\\n        emit Register(id, authKey_, username_);\\n    }\\n\\n    function updateAuthKey(bytes32 id, address newAuthKey) external {\\n        authenticate(id, _msgSender());\\n        _identities[id].authKey = newAuthKey;\\n        emit AuthKeyUpdate(id, newAuthKey);\\n    }\\n\\n    function authenticate(\\n        bytes32 id,\\n        address operator\\n    ) public override view {\\n        if (operator.encode() == id) {\\n            return;\\n        }\\n        require(\\n            authKey(id) == operator,\\n            'IdentityService: operator not authorized'\\n        );\\n    }\\n\\n    function username(bytes32 id) public override view returns(string memory) {\\n        return _identities[id].username;\\n    }\\n\\n    function authKey(bytes32 id) public override view returns(address) {\\n        return _identities[id].authKey;\\n    }\\n}\\n\",\"keccak256\":\"0x8489189fc7dc54933c395a5830633b284e2b078a39c03cf3e4b70e3e980b1185\",\"license\":\"MIT\"},\"contracts/LibIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LibIdentity {\\n    function encode(address account) internal pure returns(bytes32) {\\n        return keccak256(abi.encode(account));\\n    }\\n}\\n\",\"keccak256\":\"0x29c89df2a7e63f4e840760bfe4c2ee39d27eda5199c7de5343495f64123d83bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506106ba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631e59c5291461005c5780638f37ad29146100715780639485133a1461009a578063ad9a2fc6146100ad578063be98d55a146100cd575b600080fd5b61006f61006a366004610519565b6100e0565b005b61008461007f3660046104d6565b610230565b60405161009191906105e0565b60405180910390f35b61006f6100a83660046104ee565b6102d2565b6100c06100bb3660046104d6565b610338565b60405161009191906105cc565b61006f6100db3660046104ee565b610356565b6000826040516020016100f391906105e0565b60405160208183030381529060405280519060200120905060006001600160a01b031661011f82610338565b6001600160a01b0316146101865760405162461bcd60e51b815260206004820152602360248201527f4964656e74697479536572766963653a20616c726561647920726567697374656044820152621c995960ea1b60648201526084015b60405180910390fd5b6040805180820182528481526001600160a01b03841660208083019190915260008481528082529290922081518051929391926101c69284920190610421565b5060209190910151600190910180546001600160a01b0319166001600160a01b039283161790556040519083169082907fa3f8ab5a398eae5d4e5b92373d1de9ebce1cb9fe46ac1d136dac922d456dff74906102239087906105e0565b60405180910390a3505050565b600081815260208190526040902080546060919061024d90610633565b80601f016020809104026020016040519081016040528092919081815260200182805461027990610633565b80156102c65780601f1061029b576101008083540402835291602001916102c6565b820191906000526020600020905b8154815290600101906020018083116102a957829003601f168201915b50505050509050919050565b6102dc8233610356565b60008281526020819052604080822060010180546001600160a01b0319166001600160a01b0385169081179091559051909184917f54f39fc7b0e71d32cb7e22fbf6e7e749bb3c93497a20c7e1f3079699ab5dc2ac9190a35050565b6000908152602081905260409020600101546001600160a01b031690565b81610369826001600160a01b03166103f1565b1415610373575050565b806001600160a01b031661038683610338565b6001600160a01b0316146103ed5760405162461bcd60e51b815260206004820152602860248201527f4964656e74697479536572766963653a206f70657261746f72206e6f742061756044820152671d1a1bdc9a5e995960c21b606482015260840161017d565b5050565b60008160405160200161040491906105cc565b604051602081830303815290604052805190602001209050919050565b82805461042d90610633565b90600052602060002090601f01602090048101928261044f5760008555610495565b82601f1061046857805160ff1916838001178555610495565b82800160010185558215610495579182015b8281111561049557825182559160200191906001019061047a565b506104a19291506104a5565b5090565b5b808211156104a157600081556001016104a6565b80356001600160a01b03811681146104d157600080fd5b919050565b6000602082840312156104e7578081fd5b5035919050565b60008060408385031215610500578081fd5b82359150610510602084016104ba565b90509250929050565b6000806040838503121561052b578182fd5b82356001600160401b0380821115610541578384fd5b818501915085601f830112610554578384fd5b8135818111156105665761056661066e565b604051601f8201601f19908116603f0116810190838211818310171561058e5761058e61066e565b816040528281528860208487010111156105a6578687fd5b8260208601602083013786602084830101528096505050505050610510602084016104ba565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b8181101561060c578581018301518582016040015282016105f0565b8181111561061d5783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061064757607f821691505b6020821081141561066857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122049375a41269a07c5aca515432a5ebaa4e7b90f1df47a4b6752d06f8e2cb8d3e064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631e59c5291461005c5780638f37ad29146100715780639485133a1461009a578063ad9a2fc6146100ad578063be98d55a146100cd575b600080fd5b61006f61006a366004610519565b6100e0565b005b61008461007f3660046104d6565b610230565b60405161009191906105e0565b60405180910390f35b61006f6100a83660046104ee565b6102d2565b6100c06100bb3660046104d6565b610338565b60405161009191906105cc565b61006f6100db3660046104ee565b610356565b6000826040516020016100f391906105e0565b60405160208183030381529060405280519060200120905060006001600160a01b031661011f82610338565b6001600160a01b0316146101865760405162461bcd60e51b815260206004820152602360248201527f4964656e74697479536572766963653a20616c726561647920726567697374656044820152621c995960ea1b60648201526084015b60405180910390fd5b6040805180820182528481526001600160a01b03841660208083019190915260008481528082529290922081518051929391926101c69284920190610421565b5060209190910151600190910180546001600160a01b0319166001600160a01b039283161790556040519083169082907fa3f8ab5a398eae5d4e5b92373d1de9ebce1cb9fe46ac1d136dac922d456dff74906102239087906105e0565b60405180910390a3505050565b600081815260208190526040902080546060919061024d90610633565b80601f016020809104026020016040519081016040528092919081815260200182805461027990610633565b80156102c65780601f1061029b576101008083540402835291602001916102c6565b820191906000526020600020905b8154815290600101906020018083116102a957829003601f168201915b50505050509050919050565b6102dc8233610356565b60008281526020819052604080822060010180546001600160a01b0319166001600160a01b0385169081179091559051909184917f54f39fc7b0e71d32cb7e22fbf6e7e749bb3c93497a20c7e1f3079699ab5dc2ac9190a35050565b6000908152602081905260409020600101546001600160a01b031690565b81610369826001600160a01b03166103f1565b1415610373575050565b806001600160a01b031661038683610338565b6001600160a01b0316146103ed5760405162461bcd60e51b815260206004820152602860248201527f4964656e74697479536572766963653a206f70657261746f72206e6f742061756044820152671d1a1bdc9a5e995960c21b606482015260840161017d565b5050565b60008160405160200161040491906105cc565b604051602081830303815290604052805190602001209050919050565b82805461042d90610633565b90600052602060002090601f01602090048101928261044f5760008555610495565b82601f1061046857805160ff1916838001178555610495565b82800160010185558215610495579182015b8281111561049557825182559160200191906001019061047a565b506104a19291506104a5565b5090565b5b808211156104a157600081556001016104a6565b80356001600160a01b03811681146104d157600080fd5b919050565b6000602082840312156104e7578081fd5b5035919050565b60008060408385031215610500578081fd5b82359150610510602084016104ba565b90509250929050565b6000806040838503121561052b578182fd5b82356001600160401b0380821115610541578384fd5b818501915085601f830112610554578384fd5b8135818111156105665761056661066e565b604051601f8201601f19908116603f0116810190838211818310171561058e5761058e61066e565b816040528281528860208487010111156105a6578687fd5b8260208601602083013786602084830101528096505050505050610510602084016104ba565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b8181101561060c578581018301518582016040015282016105f0565b8181111561061d5783604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061064757607f821691505b6020821081141561066857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122049375a41269a07c5aca515432a5ebaa4e7b90f1df47a4b6752d06f8e2cb8d3e064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1235,
        "contract": "contracts/IdentityService.sol:IdentityService",
        "label": "_identities",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Identity)1230_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Identity)1230_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IdentityService.Identity)",
        "numberOfBytes": "32",
        "value": "t_struct(Identity)1230_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Identity)1230_storage": {
        "encoding": "inplace",
        "label": "struct IdentityService.Identity",
        "members": [
          {
            "astId": 1227,
            "contract": "contracts/IdentityService.sol:IdentityService",
            "label": "username",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1229,
            "contract": "contracts/IdentityService.sol:IdentityService",
            "label": "authKey",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}