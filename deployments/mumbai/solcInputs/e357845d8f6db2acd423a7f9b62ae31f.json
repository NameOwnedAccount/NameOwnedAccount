{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge23.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./LibIdentity.sol\";\nimport \"./ERC20/ERC20Capped.sol\";\n\ncontract Bridge23 is ERC20Capped, Ownable {\n    using LibIdentity for address;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address identityService,\n        uint256 supplyCap\n    ) ERC20(name, symbol, identityService) ERC20Capped(supplyCap) { }\n\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to.encode(), amount);\n    }\n\n    function mint(bytes32 to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/LibIdentity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nlibrary LibIdentity {\n    function encode(address account) internal pure returns(bytes32) {\n        return keccak256(abi.encode(account));\n    }\n}\n"
    },
    "contracts/ERC20/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\n\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    function _mint(bytes32 account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"../LibIdentity.sol\";\nimport \"../IIdentityService.sol\";\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using LibIdentity for address;\n\n    event Transfer(bytes32 indexed from, bytes32 indexed to, uint256 value);\n    event Approval(bytes32 indexed owner, bytes32 indexed spender, uint256 value);\n\n    bytes32 constant private ADDRESS_ZERO = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n    address immutable public identityService;\n    mapping(bytes32 => uint256) private _balances;\n    mapping(bytes32 => mapping(bytes32 => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address identityService_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        identityService = identityService_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(bytes32 account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account.encode()];\n    }\n\n    function allowance(bytes32 owner, bytes32 spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner.encode()][spender.encode()];\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner.encode(), to.encode(), amount);\n        return true;\n    }\n\n    function transfer(\n        bytes32 from,\n        bytes32 to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        address operator = _msgSender();\n        IIdentityService(identityService).authenticate(from, operator);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address operator = _msgSender();\n        _spendAllowance(from.encode(), operator.encode(), amount);\n        _transfer(from.encode(), to.encode(), amount);\n        return true;\n    }\n\n    function transferFrom(\n        bytes32 delegator,\n        bytes32 from,\n        bytes32 to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        IIdentityService(identityService).authenticate(delegator, _msgSender());\n        _spendAllowance(from, delegator, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address operator = _msgSender();\n        _approve(operator.encode(), spender.encode(), amount);\n        return true;\n    }\n\n    function approve(\n        bytes32 owner,\n        bytes32 spender,\n        uint256 amount\n    ) public virtual returns (bool) {\n        IIdentityService(identityService).authenticate(owner, _msgSender());\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address sender = _msgSender();\n        bytes32 owner = sender.encode();\n        bytes32 spenderAsId = spender.encode();\n        _approve(owner, spenderAsId, allowance(owner, spenderAsId) + addedValue);\n        return true;\n    }\n\n    function increaseAllowance(\n        bytes32 owner,\n        bytes32 spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        IIdentityService(identityService).authenticate(owner, _msgSender());\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address sender = _msgSender();\n        bytes32 owner = sender.encode();\n        bytes32 spenderId = spender.encode();\n        uint256 currentAllowance = allowance(owner, spenderId);\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spenderId, currentAllowance - subtractedValue);\n        }\n        return true;\n    }\n\n    function decreaseAllowance(\n        bytes32 owner,\n        bytes32 spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        IIdentityService(identityService).authenticate(owner, _msgSender());\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n        return true;\n    }\n\n    function _spendAllowance(\n        bytes32 owner,\n        bytes32 spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function _approve(\n        bytes32 owner,\n        bytes32 spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != ADDRESS_ZERO, \"ERC20: approve from the zero address\");\n        require(spender != ADDRESS_ZERO, \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        bytes32 from,\n        bytes32 to,\n        uint256 amount\n    ) internal virtual {\n        require(from != ADDRESS_ZERO, \"ERC20: transfer from the zero address\");\n        require(to != ADDRESS_ZERO, \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    function _mint(bytes32 account, uint256 amount) internal virtual {\n        require(account != ADDRESS_ZERO, \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(ADDRESS_ZERO, account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(ADDRESS_ZERO, account, amount);\n\n        _afterTokenTransfer(ADDRESS_ZERO, account, amount);\n    }\n\n    function _burn(bytes32 account, uint256 amount) internal virtual {\n        require(account != ADDRESS_ZERO, \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, ADDRESS_ZERO, amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, ADDRESS_ZERO, amount);\n\n        _afterTokenTransfer(account, ADDRESS_ZERO, amount);\n    }\n\n    function _beforeTokenTransfer(\n        bytes32 from,\n        bytes32 to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        bytes32 from,\n        bytes32 to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/IIdentityService.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport './LibIdentity.sol';\n\ninterface IIdentityService {\n    event AuthKeyUpdate(\n        bytes32 indexed id,\n        address indexed authenticator\n    );\n\n    function authKey(bytes32 id) external view returns(address);\n\n    function authenticate(\n        bytes32 id,\n        address operator\n    ) external view;\n}\n"
    },
    "contracts/IdentityService.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport './IIdentityService.sol';\n\ncontract IdentityService is Context, IIdentityService {\n    using LibIdentity for address;\n\n    mapping(bytes32 => address) private _authKeys;\n\n    function authKey(bytes32 id) public override view returns(address) {\n        return _authKeys[id];\n    }\n\n    function authenticate(\n        bytes32 id,\n        address operator\n    ) public override view {\n        if (operator.encode() == id) {\n            return;\n        }\n        address key = authKey(id);\n        require(\n            key == address(0) || key == operator,\n            'IdentityService: operator not authorized'\n        );\n    }\n\n    function setAuthKey(bytes32 id, address newAuthKey) external {\n        authenticate(id, _msgSender());\n        _authKeys[id] = newAuthKey;\n        emit AuthKeyUpdate(id, newAuthKey);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}